# Default values for ITL Terranetes Controller
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration for ITL deployment
global:
  # ITL-specific namespace for terraform operations
  namespace: terraform-system
  # ITL cluster name for identification
  clusterName: "itl-prod"
  # Enable ITL-specific security policies
  enableITLSecurity: true

# Configuration for the official Terranetes Controller chart
terranetes-controller:
  nameOverride: ""
  # Override the naming scheme and force to this name
  fullnameOverride: ""
  # The number of replicas for the controller
  replicaCount: 2
  # Settings for the controller
  controller:
    # Is the port the builds apis
    port: 10080
    # Is the port the store api
    apiPort: 10081
    # Is the port for the metrics service
    metricsPort: 9090
    # The namespace to run all the jobs in
    namespace: default
    # Indicates if the controller should register its own CRDs
    registerCRDs: true
    # Executor secrets includes the following secrets in 'all' execution jobs. The secret is added
    # as an environment variables (spec.envFrom) into the terranetes container of the executor
    executorSecrets: []
    # Configuration for the backend terraform state template
    backend:
      # Overrides the default terraform state backend from Kubernetes secret to anything defined on the
      # template. This value is the name of a secret in the controller namespace which contains a
      # backend.tf key, holding a golang template to use for the terraform state
      name: ""
      # Template will automatically create a backend secret for you
      template: ""
    # The binary path of the executable to run in the terraform image
    binaryPath: /usr/local/bin/tofu
    # Configuration related to costs
    costs:
      # Name of the secret containing the infracost api token
      # Naming format of values found https://www.infracost.io/docs/features/environment_variables/
      secret: ""
    # Configuration for the images used by the jobs
    images:
      # is the default image to use for terraform operations
      terraform: ghcr.io/opentofu/opentofu:1.8.5
      # image to use for infracost
      infracost: infracost/infracost:ci-0.10.39
      # policy is image for policy
      policy: bridgecrew/checkov:3.2.298
      # preload is the image to use for preload data jobs
      preload: ghcr.io/appvia/terranetes-executor:v0.5.6
      # is the controller image
      controller: ghcr.io/appvia/terranetes-controller:v0.5.6
      # The terranetes image used when running jobs
      executor: ghcr.io/appvia/terranetes-executor:v0.5.6
    # Rate limting on configurations to prevent the controller from being overwhelmed. This
    # is the percentage of configurations which are permitted to run a plan at any one time.
    # Note, zero means no rate limiting is applied.
    configuration_rate_threshold: 0
    # driftInterval is the minimum time to check for drift
    driftInterval: 5h
    # driftThreshold is the percentage of configurations which are permitted
    # to run a drift detection at any one time
    driftThreshold: 0.10
    # driftControllerInterval is the interval the controller will use to requeue. On every iteration
    # the configurations are checked and anyone who's last plan occurred longer than the driftInterval
    # is up for a drift trigger. Its fine to have this low, it's the driftInterval and threshold which
    # ultimately effective jobs running to check drift.
    driftControllerInterval: 5m
    # Allows you to overload the templates
    templates:
      # is the name of config map holding a override to the job template
      job: ""
    # a collection of labels which are added to all jobs
    jobLabels: {}
    # is the image pull policy
    imagePullPolicy: IfNotPresent
    # indicate we create the watcher jobs in user namespace, these allow users
    # to view the terraform output
    enableWatchers: true
    ## Indicates we should forgo the controller registering it's own webhooks and allowing
    ## helm to manage the webhooks for us
    enableHelmWebhookRegistration: true
    ## indicates if the controller should register the validation and mutation webhooks
    ## for the Configuration, Revision and CloudResource resources
    enableControllerWebhookRegistration: false
    # indicates if namespace deletion should be blocked if the namespace contains one
    # or more Configuration resources, forcing the user to delete correctly
    enableNamespaceProtection: false
    # indicates if the controller should deny updates to Revisions which are currently in use
    enableRevisionUpdateProtection: true
    # enableTerraformVersions indicates configurations are permitted to override
    # the terraform version in their spec.
    enableTerraformVersions: true
    # enableContextInjection indicates the controller should add the terranetes
    # map variable into all configurations. This adds a variable called 'terraform'
    # terranetes:
    #   namespace: ""
    #   name: ""
    #   labels {}
    # into the terraform variables of every module. Note, this doesn't mean you have
    # to use it, but if you do the variables are there.
    enableContextInjection: false
    # The default terraform version (or tag of the above image)
    webhooks:
      # enables the webhooks
      enabled: true
      # enables prefixing the webhook configuration names with the controller name
      prefix: false
      # is the port the webhooks is running
      port: 10250
      # creates the certificate authority secret
      ca: true
      # secret name containing certificate authority and server certificate
      caSecret: "ca"
      # name of the file containing the certificate authority
      tlsAuthority: /certs/ca.pem
      # name of the file containing the tls certificate
      tlsCert: tls.pem
      # directory containing the above certificates
      tlsDir: /certs
      # name of the file containing the tls private key
      tlsKey: tls-key.pem
      # the base64 encoded certificate authority for the webhook
      caBundle: ""
      # the base64 encoded certificate for the webhook service
      cert: ""
      # the base64 encoded private key for the webhook service
      key: ""

    # extraArgs is used for passing additional command line arguments to the
    # controller.
    extraArgs:
      verbose: true
  networkPolicies:
    # Indicates we should create the network policies
    enabled: true
  imagePullSecrets: []
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - all
  # Allows to you deploy a number of providers into the clusters
  providers:
    - name: keycloak
      summary: "Keycloak Identity and Access Management provider"
      source: secret
      labels:
        app.kubernetes.io/component: keycloak-provider
        itl.academy/provider: keycloak
      annotations:
        description: "Terraform provider for managing Keycloak resources"
      # The cloud vendor this credentials is for (custom for keycloak)
      provider: keycloak
      # Secret containing Keycloak provider configuration
      secret: keycloak-terraform-provider
      # Additional provider configuration
      configuration:
        url: "https://sts.itlusions.com"
        client_id: "terraform-provider"
        realm: "master"
        # client_secret will come from the secret
        # Using client credentials flow for authentication
  #  - name: aws
  #    summary: A summary for this provider
  #    source: injected
  #    labels: {}
  #    annotations: {}
  #    job:
  #      annotations: {}
  #      labels: {}
  #    # The cloud vendor this credentials is for
  #    provider: aws|google|azurerm
  #    # When using source secret we should have a secret name
  #    secret: NAME
  #    # When using source injected we should have a service account
  #    serviceAccount: SERV
  #    # When using preload this is copied into the provider
  #    preload: {}
  #    # Additional provider configuration
  #    configuration: {}
  rbac:
    # Indicates we allow all service account in the controller namespace the role of
    # executor. This makes rolling out multiple providers backed to multiple services easier.
    # Service account used by executors need access to read and write secrets and leases in the
    # controller namespace (namely the controller-executor role)
    enableExecutorServiceAccountPermissions: false
    # Indicates we should create all the rbac
    create: true
    # service account for the controller
    controller:
      # Indicates we should provision the rbac
      create: true
      # annotations is a collection of annotations which should be added
      annotations: {}
    # Configuration for the terraform executor service account
    executor:
      # indicates we should create the terranetes-executor service account
      create: true
      # annotations is a collection of annotations which should be added
      annotations: {}
  # Allows to you to control via the helm chart the deployment of a number of
  # security policy which govern what must be enforced in the controller and by
  # the consumers.
  policies:
  #  - name: permitted_modules
  #    labels: {}
  #    annotations: {}
  #    constraint:
  #      modules:
  #        allowed: []
  #    defaults: []
  resources: {}
  # These resources are applied to the controller
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: name
                  operator: In
                  values:
                    - controller
            topologyKey: failure-domain.beta.kubernetes.io/zone
        - weight: 95
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: name
                  operator: In
                  values:
                    - controller
            topologyKey: kubernetes.io/hostname


# ITL-specific configurations and overrides
itl:
  # Organization settings
  organization:
    name: "ITlusions"
    domain: "itlusions.com"

  # Environment configuration
  environment:
    name: "production"
    region: "westeurope"
    
  # ITL Keycloak integration
  keycloak:
    enabled: true
    
    # Keycloak server configuration
    server:
      enabled: true
      # Keycloak server URL for ITL Academy
      url: "https://sts.itlusions.com"
      # Keycloak admin realm
      adminRealm: "master"
      # Reference to Keycloak admin credentials (using client credentials)
      adminCredentials:
        secretName: "keycloak-terraform-provider"
        clientIdKey: "client_id"
        clientSecretKey: "client_secret"
    
    # Keycloak Terraform provider configuration
    provider:
      version: "4.4.0"
      clientTimeout: 30
      tlsInsecureSkipVerify: false
      constraints:
        # Require specific provider version
        - expression: 'provider.version >= "4.0.0"'
          description: "Minimum Keycloak provider version for ITL compatibility"
      policies:
        # Security policies for Keycloak provider usage
        - name: "keycloak-security-policy"
          description: "Enforce security best practices for Keycloak resources"
    
    # ITL Academy realm configuration
    realm:
      name: "ITL-Academy"
      displayName: "ITL Academy"
      enabled: true
      # Realm-specific settings
      settings:
        # User registration settings
        registrationAllowed: false
        registrationEmailAsUsername: true
        rememberMe: true
        verifyEmail: true
        resetPasswordAllowed: true
        # Session settings
        ssoSessionIdleTimeout: 1800  # 30 minutes
        ssoSessionMaxLifespan: 36000  # 10 hours
        # Security settings
        bruteForceProtected: true
        failureFactor: 5
        waitIncrementSeconds: 60
        quickLoginCheckMilliSeconds: 1000
        
    # Reference to the Keycloak client management we created
    clientManagement:
      enabled: true
      secretName: "keycloak-client-secrets"
      
    # Terraform client ID for provider authentication
    clientId: "terraform-admin"
    
    # Default clients for ITL applications
    clients:
      # Terranetes Controller client
      - name: "terranetes-controller"
        clientId: "terranetes-controller"
        enabled: false
        protocol: "openid-connect"
        # Client access type
        publicClient: false
        standardFlowEnabled: true
        directAccessGrantsEnabled: false
        serviceAccountsEnabled: true
        # Redirect URIs
        redirectUris:
          - "https://terraform.itlusions.com/*"
          - "http://localhost:8080/*"
        # Client roles
        roles:
          - "terraform-admin"
          - "terraform-user"
          - "terraform-viewer"
          
      # ITL Documentation Hub client
      - name: "itl-docs-hub"
        clientId: "itl-docs-hub"
        enabled: false
        protocol: "openid-connect"
        publicClient: false
        standardFlowEnabled: true
        redirectUris:
          - "https://docs.itlusions.com/*"
        roles:
          - "docs-admin"
          - "docs-editor"
          - "docs-viewer"
          
      # Student Portal client (SPA Example)
      - name: "student-portal"
        clientId: "student-portal"
        enabled: true
        protocol: "openid-connect"
        publicClient: true
        standardFlowEnabled: true
        redirectUris:
          - "https://portal.itlusions.com/auth/callback"
          - "http://localhost:3000/auth/callback"
        webOrigins:
          - "https://portal.itlusions.com"
          - "http://localhost:3000"
        roles:
          - "student"
          - "instructor"
          - "admin"
    
    # User groups configuration
    groups:
      # ITL Staff groups
      - name: "itl-staff"
        displayName: "ITL Staff"
        description: "Full access to ITL systems"
        # Assign roles
        realmRoles:
          - "admin"
        clientRoles:
          terranetes-controller:
            - "terraform-admin"
          itl-docs-hub:
            - "docs-admin"
            
      # Instructors group
      - name: "instructors"
        displayName: "Instructors"
        description: "Course instructors with teaching privileges"
        realmRoles:
          - "instructor"
        clientRoles:
          terranetes-controller:
            - "terraform-user"
          itl-docs-hub:
            - "docs-editor"
          student-portal:
            - "instructor"
            
      # Students group
      - name: "students"
        displayName: "Students"
        description: "Course participants with limited access"
        realmRoles:
          - "student"
        clientRoles:
          terranetes-controller:
            - "terraform-viewer"
          itl-docs-hub:
            - "docs-viewer"
          student-portal:
            - "student"
    
    # Identity providers configuration
    identityProviders:
      # Azure AD integration for ITL staff
      azureAD:
        enabled: true
        alias: "azure-ad"
        displayName: "ITL Azure AD"
        # Azure AD configuration
        config:
          clientId: "${AZURE_AD_CLIENT_ID}"
          clientSecret: "${AZURE_AD_CLIENT_SECRET}"
          tenantId: "${AZURE_AD_TENANT_ID}"
        # Default groups for Azure AD users
        defaultGroups:
          - "itl-staff"
          
      # GitHub integration for external instructors
      github:
        enabled: false
        alias: "github"
        displayName: "GitHub"
        config:
          clientId: "${GITHUB_CLIENT_ID}"
          clientSecret: "${GITHUB_CLIENT_SECRET}"
        # Default groups for GitHub users
        defaultGroups:
          - "instructors"
    
    # Theme configuration
    theme:
      # Use ITL-branded theme
      name: "itlusions"
      # Theme deployment
      deployment:
        enabled: false
        # Reference to theme ConfigMap or Secret
        source:
          type: "configmap"
          name: "keycloak-itl-theme"
    
  # ITL-specific providers
  providers:
    # Enable cloud providers commonly used by ITL
    azure:
      enabled: false
      secretName: "azure-credentials"
    aws:
      enabled: false
      secretName: "aws-credentials"
    google:
      enabled: false
      secretName: "gcp-credentials"
      
  # ITL-specific policies
  policies:
    # Security policies for ITL projects
    security:
      enabled: true
      # Require specific security checks
      requiredChecks:
        - "CKV_AZURE_1"  # Ensure no secrets in ARM templates
        - "CKV_AZURE_2"  # Ensure storage account access keys are secured
        - "CKV_K8S_8"   # Liveness Probe Should be Configured
        - "CKV_K8S_9"   # Readiness Probe Should be Configured
      
    # Cost management policies
    cost:
      enabled: false
      # Maximum monthly cost threshold (in USD)
      maxMonthlyCost: 1000
      
    # Compliance policies for educational environment
    compliance:
      enabled: true
      standards:
        - "azure-cis"
        - "kubernetes-cis"
        
  # ITL-specific contexts for common configurations
  contexts:
    # Development environment context
    development:
      enabled: true
      values:
        environment: "dev"
        costCenter: "education"
        department: "ITL"
        
    # Production environment context  
    production:
      enabled: true
      values:
        environment: "prod"
        costCenter: "operations"
        department: "ITL"
        
  # ITL module repositories
  modules:
    # Private ITL module registry
    registry:
      enabled: true
      url: "git::https://github.com/ITlusions/ITL.Terranetes.Modules.git"
      
    # Common ITL modules
    common:
      # Keycloak modules for authentication and authorization
      - name: "keycloak-realm"
        source: "git::https://github.com/ITlusions/ITL.Terranetes.Modules.git//keycloak/realm"
        description: "Create and manage Keycloak realms with ITL standards"
        version: "v1.0.0"
        
      - name: "keycloak-client"
        source: "git::https://github.com/ITlusions/ITL.Terranetes.Modules.git//keycloak/client"
        description: "Create and manage Keycloak OpenID Connect clients"
        version: "v1.0.0"
        
      # Infrastructure modules
      - name: "azure-vm"
        source: "git::https://github.com/ITlusions/ITL.Terranetes.Modules.git//azure/vm"
        description: "Azure Virtual Machine with ITL standards"
        version: "v1.0.0"
        
      - name: "azure-storage"
        source: "git::https://github.com/ITlusions/ITL.Terranetes.Modules.git//azure/storage"
        description: "Azure Storage Account with ITL standards"
        version: "v1.0.0"
        
      - name: "kubernetes-namespace"
        source: "git::https://github.com/itlusions/terraform-modules.git//k8s-namespace"
        
    # Keycloak modules for authentication and authorization
    keycloak:
      enabled: true
      modules:
        # Keycloak server deployment module
        - name: "keycloak-server"
          source: "git::https://github.com/itlusions/terraform-modules.git//keycloak/server"
          description: "Deploy Keycloak server with ITL-specific configuration"
          version: "v1.0.0"
          
        # Keycloak realm configuration module
        - name: "keycloak-realm"
          source: "git::https://github.com/itlusions/terraform-modules.git//keycloak/realm"
          description: "Configure ITL Academy realm with users, groups, and roles"
          version: "v1.0.0"
          
        # Keycloak client configuration module
        - name: "keycloak-client"
          source: "git::https://github.com/itlusions/terraform-modules.git//keycloak/client"
          description: "Create and configure Keycloak clients for ITL applications"
          version: "v1.0.0"
          
        # Keycloak identity provider module
        - name: "keycloak-identity-provider"
          source: "git::https://github.com/itlusions/terraform-modules.git//keycloak/identity-provider"
          description: "Configure external identity providers (Azure AD, GitHub, etc.)"
          version: "v1.0.0"
          
        # Keycloak theme module
        - name: "keycloak-theme"
          source: "git::https://github.com/itlusions/terraform-modules.git//keycloak/theme"
          description: "Deploy ITL-branded Keycloak theme"
          version: "v1.0.0"
          
        # Keycloak backup module
        - name: "keycloak-backup"
          source: "git::https://github.com/itlusions/terraform-modules.git//keycloak/backup"
          description: "Configure automated backup for Keycloak data"
          version: "v1.0.0"

# Additional configurations for ITL deployment
monitoring:
  # Enable Prometheus monitoring
  prometheus:
    enabled: false
    serviceMonitor:
      enabled: true
      labels:
        app: "terranetes-controller"
        
  # Enable Grafana dashboards
  grafana:
    enabled: false
    dashboards:
      enabled: true

# Backup and disaster recovery
backup:
  enabled: true
  # Backup terraform state every 6 hours
  schedule: "0 */6 * * *"
  retention: "30d"

# Security scanning and compliance
security:
  # Enable network policies
  networkPolicies:
    enabled: false
    
  # Pod security standards
  podSecurity:
    enabled: true
    standard: "restricted"
    
  # Image scanning
  imageScanning:
    enabled: true
    
# Integration with ITL services
integrations:
  # ArgoCD for GitOps
  argocd:
    enabled: false
    namespace: "argocd"
    
  # Grafana for monitoring
  grafana:
    enabled: false
    namespace: "monitoring"
    
  # Prometheus for metrics
  prometheus:
    enabled: false
    namespace: "monitoring"
    
  # Keycloak for authentication
  keycloak:
    enabled: false
    namespace: "keycloak"

# Keycloak Clients Configuration
# Configure multiple Keycloak clients that will be managed by Terranetes
keycloakClients:
  # Example web application client
  jupyterhub-client:
    enabled: false
    realmId: "itl-academy"
    clientId: "jupyterhub"
    displayName: "JupyterHub"
    accessType: "CONFIDENTIAL"
    redirectUris:
      - "https://jupyter.itlusions.com/hub/oauth-callback"
    webOrigins:
      - "https://jupyter.itlusions.com"
    roles:
      - name: "admin"
        description: "JupyterHub administrator"
      - name: "instructor"
        description: "Teaching privileges"
      - name: "student"
        description: "Student access"
    defaultScopes:
      - "profile"
      - "email"
      - "roles"
    providerRef:
      name: "keycloak"
      namespace: "terraform-system"
    
  # Example API service client
  grafana-client:
    enabled: false
    realmId: "itl-academy"
    clientId: "grafana"
    displayName: "Grafana Monitoring"
    accessType: "CONFIDENTIAL"
    serviceAccountsEnabled: true
    redirectUris:
      - "https://grafana.itlusions.com/login/generic_oauth"
    defaultScopes:
      - "profile"
      - "email"
      - "roles"
    providerRef:
      name: "keycloak"
      namespace: "terraform-system"
      
  # Example mobile app client
  mobile-app-client:
    enabled: false
    realmId: "itl-academy"
    clientId: "itl-mobile-app"
    displayName: "ITL Mobile App"
    accessType: "PUBLIC"
    pkceMethod: "S256"
    redirectUris:
      - "com.itlusions.app://oauth-callback"
    roles:
      - name: "mobile-user"
        description: "Mobile app user"
    providerRef:
      name: "keycloak"
      namespace: "terraform-system"
      
  # Example SPA client
  portal-spa-client:
    enabled: false
    realmId: "itl-academy"
    clientId: "itl-portal-spa"
    displayName: "ITL Portal SPA"
    accessType: "PUBLIC"
    pkceMethod: "S256"
    standardFlowEnabled: true
    implicitFlowEnabled: false
    directAccessGrantsEnabled: false
    redirectUris:
      - "https://portal.itlusions.com/auth/callback"
      - "http://localhost:3000/auth/callback"  # For development
    webOrigins:
      - "https://portal.itlusions.com"
      - "http://localhost:3000"  # For development
    defaultScopes:
      - "profile"
      - "email"
      - "roles"
    providerRef:
      name: "keycloak"
      namespace: "terraform-system"